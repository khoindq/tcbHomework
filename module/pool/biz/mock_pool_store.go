// Code generated by mockery v2.14.1. DO NOT EDIT.

package poolbiz

import (
	context "context"

	poolmodel "github.com/khoindq/tcbHomework/module/pool/model"
	mock "github.com/stretchr/testify/mock"
)

// MockPoolStore is an autogenerated mock type for the PoolStore type
type MockPoolStore struct {
	mock.Mock
}

// AppendPool provides a mock function with given fields: ctx, data
func (_m *MockPoolStore) AppendPool(ctx context.Context, data *poolmodel.PoolAppend) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *poolmodel.PoolAppend) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindPool provides a mock function with given fields: ctx, id
func (_m *MockPoolStore) FindPool(ctx context.Context, id *int64) (*poolmodel.Pool, bool) {
	ret := _m.Called(ctx, id)

	var r0 *poolmodel.Pool
	if rf, ok := ret.Get(0).(func(context.Context, *int64) *poolmodel.Pool); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*poolmodel.Pool)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, *int64) bool); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// InsertPool provides a mock function with given fields: ctx, data
func (_m *MockPoolStore) InsertPool(ctx context.Context, data *poolmodel.PoolInsert) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *poolmodel.PoolInsert) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockPoolStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPoolStore creates a new instance of MockPoolStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPoolStore(t mockConstructorTestingTNewMockPoolStore) *MockPoolStore {
	mock := &MockPoolStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
